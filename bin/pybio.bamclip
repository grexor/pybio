#!/usr/bin/python

import os
import apa
import pybio
import pysam
import argparse
import gzip
import numpy
import glob
import sys

import matplotlib
matplotlib.use("Agg", warn=False)
import matplotlib.pyplot as plt
import math
from matplotlib import cm as CM

# styling
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['axes.titlesize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 14
matplotlib.rcParams['ytick.labelsize'] = 14
matplotlib.rcParams['legend.fontsize'] = 14
matplotlib.rc('axes',edgecolor='gray')
matplotlib.rcParams['axes.linewidth'] = 0.4
matplotlib.rcParams['legend.frameon'] = 'False'

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('-bam', action="store", dest="bam", default=None)
parser.add_argument('-image', action="store", dest="image", default="bamclip")
args = parser.parse_args()

seq_len = 0
seqs = []
all_files = glob.glob(os.path.expanduser(args.bam))

map_5 = map_3 = map_read = None

count = 0
for bam_filename in all_files:
    print "reading: %s" % os.path.basename(bam_filename)
    bam_file = pysam.Samfile(bam_filename)
    for a in bam_file.fetch():
        seq_len = max(seq_len, len(a.seq))
        sc_3 = 0
        sc_5 = 0
        if a.is_reverse:
            last_cigar = a.cigar[0]
            first_cigar = a.cigar[-1]
        else:
            last_cigar = a.cigar[-1]
            first_cigar = a.cigar[0]
        removed_3 = 0
        removed_5 = 0
        if last_cigar[0]==4:
            removed_3 = last_cigar[1]
        if first_cigar[0]==4:
            removed_5 = first_cigar[1]
        if a.is_reverse:
            read_sequence = pybio.sequence.reverse_complement(a.seq)
            mapped_sequence = pybio.sequence.reverse_complement(a.query)
        else:
            read_sequence = a.seq
            mapped_sequence = a.query
        flank_5 = ""
        flank_3 = ""
        if removed_5>0:
            flank_5 = read_sequence[:removed_5]
        if removed_3>0:
            flank_3 = read_sequence[-removed_3:]

        read_reconstructed =  "%s%s%s" % (flank_5,mapped_sequence,flank_3)
        assert(read_sequence==read_reconstructed)
        if removed_3==0:
            assert(read_sequence[removed_5:]==mapped_sequence)
        else:
            assert(read_sequence[removed_5:-removed_3]==mapped_sequence)

        row = [flank_5, mapped_sequence, flank_3]

        if map_read==None:
            map_5 = [0]*seq_len
            map_3 = [0]*seq_len
            map_read = [0]*seq_len

        if seq_len>len(map_read):
            ext = seq_len - len(map_read)
            map_5 = map_5 + [0]*ext
            map_3 = map_3 + [0]*ext
            map_read = map_read + [0]*ext
        for i in range(0, len(flank_5)):
            map_5[i] = map_5[i]+1
        for i in range(len(flank_5), len(flank_5)+len(mapped_sequence)):
            map_read[i] = map_read[i]+1
        for i in range(len(flank_5)+len(mapped_sequence), len(flank_5)+len(mapped_sequence)+len(flank_3)):
            map_3[i] = map_3[i]+1

        count += 1
        if count%1000==0:
            sys.stdout.write("\r    %.3fM alignments processed [read_len=%s]" % (count/1e6, seq_len))
            sys.stdout.flush()
    print

map_5 = [x/float(count)*100.0 for x in map_5]
map_read = [x/float(count)*100.0 for x in map_read]
map_3 = [x/float(count)*100.0 for x in map_3]
clipped_overall = [e1+e2 for e1, e2 in zip(map_5, map_3)]

plt.figure(figsize=(12, 3))
#ax1 = plt.axes([0.1, 0.2, 0.85, 0.7])
ax1 = plt.gca()
ax1.set_xlim(0, seq_len)
ax1.set_ylim(-0.5, max(clipped_overall))
#plt.yticks([0, 0.25, 0.5, 0.75, 1], [0, 0.25, 0.5, 0.75, 1])
ax1.set_title("percentage of clipped alignments [%.3fM alignments]" % (count/1e6))
ax1.set_ylabel("% alignments")
plt.xlabel("position in read [nt]")
legend = []


#for name, data in [("clipped 5'", map_5), ("aligned", map_read), ("clipped 3'", map_3)]:
#for name, data in [("clipped 5'", map_5), ("clipped 3'", map_3)]:
for name, data in [("clipped", clipped_overall)]:
    #legend.append(name)
    plt.plot(range(0, seq_len), data, linewidth=4, linestyle="-", color='#707070')

ax1.legend(legend, loc='upper right')
ax1.grid(alpha=0.5)

plt.tight_layout()
#plt.savefig(os.path.expanduser(args.image)+".png", dpi=150)
plt.savefig(os.path.expanduser(args.image)+".pdf")
plt.close()

f = open(os.path.expanduser(args.image)+".tab", "wt")
f.write("count\t%s\n" % count)
f.write("map_5\t" + "\t".join(str(e) for e in map_5) + "\n")
f.write("mapped\t" + "\t".join(str(e) for e in map_read) + "\n")
f.write("map_3\t" + "\t".join(str(e) for e in map_3) + "\n")
f.close()
