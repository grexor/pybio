#!/usr/bin/env python3

import os
import sys
import argparse
import pybio

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('commands', help="which command to run?", nargs='*')
parser.add_argument("-version", "--version", help="Print version", action="store_true")
parser.add_argument("-nostar", "--nostar", help="Do not process genome with STAR (index)", action="store_true")
parser.add_argument("-nosalmon", "--nosalmon", help="Do not process transcripts with salmon (index)", action="store_true")
parser.add_argument("-species", "--species", help="Species name, e.g. homo_sapiens")
parser.add_argument("-genome_version", "--genome_version", help="Version of the genome, e.g. ensembl109; if not provided, the latest Ensembl version is used")
parser.add_argument("-fasta", "--fasta", help="Process sequences from fasta file")
parser.add_argument("-gtf", "--gtf", help="GTF file to import")
args = parser.parse_args()

help_genome = """
To download genomes, please specify species.

Example:

$ pybio genome homo_sapiens

The above will download the latest Ensembl human genome.
"""

print(f"[pybio] v{pybio.version}, https://github.com/grexor/pybio")
print(f"[pybio] genomes folder: {pybio.config.genomes_folder}")
print()

if args.version:
    sys.exit(0)

def is_known_species(species):
    species = species.lower()
    return species in pybio.core.genomes.species_db

def determine_species(species):
    provided_species = species
    id_species = None
    species = species.lower()
    potential_hits = []
    for species_id, species_data in pybio.core.genomes.species_db.items():
        display_name = species_data["display_name"].lower()
        if display_name.find(species)!=-1 or species_id.find(species)!=-1:
            potential_hits.append((len(display_name), species_id, display_name))
    potential_hits.sort()
    if len(potential_hits)>0:
        return potential_hits
    return []

def display_potential_hits(potential_hits, search_text):
    print(f"We found {len(potential_hits)} genome hits for your provided genome species `{search_text}`.\nPlease choose the species genome you would like to download:\n")
    for hit in potential_hits:
        print(f"Species = '{hit[1]}', display name = '{hit[2]}'")
    if len(potential_hits)>0:
        print(f"\nFor example, to download the first hit from the list above, you could write:\n")
        print(f"$ pybio genome {potential_hits[0][1]}")
        print()
    sys.exit(1)

if len(args.commands)>0:

    if args.commands[0]=="species":
        if len(args.commands)>1:
            potential_hits = determine_species(args.commands[1])
            display_potential_hits(potential_hits, args.commands[1])

    if args.commands[0]=="genome":
        if len(args.commands)==1:
            print("All genomes data stored at: " + pybio.config.genomes_folder)
            print(help_genome)
            sys.exit()
        species = args.commands[1]
        known_species = is_known_species(species)
        if not known_species:
            potential_hits = determine_species(species)
            if len(potential_hits)>1:
                display_potential_hits(potential_hits, species)
            elif len(potential_hits)==1:
                species = potential_hits[0][1]
        if args.genome_version!=None:
            genome_version = args.genome_version
        else:
            try:
                genome_version = args.commands[2]
                if genome_version.find("ensembl")==-1:
                    print("Unknown genome version, examples: ensembl109 or ensemblgenomes56")
                    sys.exit(1)
            except:
                genome_version = pybio.core.genomes.species_db.get(species, {}).get("genome_version", "")
        if genome_version.find("ensembl")!=-1:
            pybio.genome_download(species, genome_version, args)
            pybio.genome_prepare(species, genome_version, args)
        elif args.fasta!=None and args.gtf!=None: # provided genome, specified species, fasta, gtf and genome_version, ok
            pybio.genome_import(species, genome_version, args)
            pybio.genome_prepare(species, genome_version, args)
        elif (args.fasta==None or args.gtf==None) and (genome_version.find("ensembl")==-1):
            print(f"Could not find a match for the provided species '{species}'.")
            print("If you would like to import a custom genome from your own FASTA and GTF files,\nan example call would be:\n")
            print("$ pybio genome custom_species -fasta /path/to/fasta -gtf /path/to/gtf -genome_version genome_v1\n")
            print("The above imported genome would be reachable under species 'custom_species' and genome_version 'genome_v1'.\n")
            print("In case you would like to import an Ensembl ready genome:\n")
            print("$ pybio genome homo_sapiens ensembl109\n")
            print("Ommiting the genome version will download the latest Ensembl release.\n")

    if args.commands[0]=="config":
        if len(args.commands)>1:
            pybio.config.change(args.commands[1]) # pybio config genome_folder
        else:
            pybio.config.change() # ask for genome folder

